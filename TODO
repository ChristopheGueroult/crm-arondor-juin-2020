✔ Interface pour nav component navItem @done(20-06-10 08:45)
✔ page list orders @done(20-06-10 12:57)
✔ enum StateOrders @done(20-06-10 12:57)
✔ interface OrderI @done(20-06-10 12:57)
✔ modèle Order @done(20-06-10 12:57)
✔ install json-server (fake api rest full côté front) @done(20-06-10 12:57)
✔ service Orders @done(20-06-10 12:57)
✔ Appels http et les observable @done(20-06-10 12:57)
✔ les life cycles @done(20-06-10 13:42)
✔ TableauLightComponent (strupide) @done(20-06-11 11:06)
✔ Pipe angular @done(20-06-10 16:03)
✔ Un pipe perso @done(20-06-10 16:03)
✔ Direcitves angular @done(20-06-10 16:04)
✔ pipe async @done(20-06-11 11:19)
✔ Directive perso @done(20-06-11 11:06)
✔ BtnComponent (strupide) @done(20-06-11 11:06)

✔ TP : page list clients en prenant example sur page list orders @done(20-06-11 14:07)
  ✔ creer un enum state-client (ACTIVE INACTIVE) @done(20-06-11 14:07)
  ✔ créer l'interface ClientI (voir db.json) @done(20-06-11 14:07)
  ✔ modèle Client (class) @done(20-06-11 14:07)
  ✔ service ClientsService @done(20-06-11 14:07)
  ✔ page list-client (template-one-col, app-text, table, state-directive, btn (clients/add)) @done(20-06-11 14:07)
  ✔ table scss ajouter les selecteurs .state-active et .state-inactive @done(20-06-11 14:07)

✔ ReactiveFormsModule @done(20-06-11 16:08)
✔ FormGroup @done(20-06-11 16:08)
✔ FormControl @done(20-06-11 16:08)
✔ FormBuilder @done(20-06-11 16:08)
✔ Binding FormGroup et FormControl avec le html @done(20-06-11 16:08)
✔ initialiser les FormControl @done(20-06-11 16:08)
✔ (ngSubmit) @done(20-06-12 08:50)
✔ @Output() @done(20-06-12 08:50)
✔ Validators @done(20-06-12 08:51)
✔ Rendre le bouton d'envoie disabled si Validators invalid @done(20-06-12 08:51)
✔ Messages d'erreur dans le html @done(20-06-12 08:51)
✔ Signaux d'erreur grâce au css et aux validateurs @done(20-06-12 08:51)

✔ TP form add client @done(20-06-12 09:15)
✔ TP delete (observable chaud pour la collection) @done(20-06-12 10:24)
  ✔ ajouter une colone Action dans le tableau (page list order ts) @done(20-06-12 10:24)
  ✔ ajouter un td avec un icon delete dans le tableau (page list order html) @done(20-06-12 10:24)
  ✔ ajouter un (click)=delete(item) sur cet icon @done(20-06-12 10:24)
  ✔ créer la fonction delete(item: Order) dans page list order ts @done(20-06-12 10:24)
  ✔ créer la fonction deleteItem(item: Order ou id: number) dans le service @done(20-06-12 10:24)
  ✔ modifier app page list order ts pour avoir un observable chaud pour collection$ @done(20-06-12 10:24)
  ✔ initialiser collection$ avec un appel http (this.os.collection.subscribe()) @done(20-06-12 10:24)
  ✔ dans la fn delete() page liste order ts, dans le subscribe, on actualise collection$ avec un nouvel appel http (this.os.collection.subscribe()) @done(20-06-12 10:24)

☐ TP edit
  ✔ add icon edit dans colone action @done(20-06-12 13:34)
  ✔ add (click)="edit(item)" sur cet icon @done(20-06-12 13:34)
  ✔ edit(item) fait une redirection vers la route orders/edit/1 @done(20-06-12 13:34)
  ✔ créer une route pour edit qui prend un paramètre id dans l'url @done(20-06-12 13:35)
  ✔ créer le component page PageEditOrderComponent @done(20-06-12 13:35)
  ✔ ts de PageEditOrderComponent récupérer l'id qui se trouve dans l'url (ActivatedRoute) @done(20-06-12 13:53)
  ✔ call this.os.getItemById(id: number ou string?): Observable<Order> @done(20-06-12 13:53)
  ✔ l'observable qui vous est retourné par cette méthode sert à initialiser un observable item$: Observable<Order> et qui est déclaré plus haut sur PageEditOrderComponent (ts) @done(20-06-12 13:54)
  ☐ dans le page-edit-order.html utiliser app-template-one-col, app-text, app-form-order
  ☐ cette fois ci, l'input initFormItem doit être bindé avec item$ (utiliser | async) ex avec collection$ dans html de page list order
  ☐ dans page-edit-order.html on garde le même @Output() avec le même appel de onSubmited($event) que dans la page add order html
  ☐ la fonction onSubmited(item: Order) dans page-edti-order.ts va utiliser this.os.updateItem(item)
  ☐ dans le subscribe() de this.os.updateItem(item) vous redirigez l'utilisateur vers la route orders (ex dans add component ts)


